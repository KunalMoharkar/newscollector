{"version":3,"sources":["logo.svg","App.js","Navigationbar.js","Header.js","Contents.js","Mynewsapp.js","serviceWorker.js","index.js"],"names":["App","Navbrand","props","class","href","this","brandname","React","Component","CollapseButton","type","data-toggle","data-target","Navlinks","links","map","link","Navigationbar","state","id","Header","content","Contents","country","isLoaded","items","prevProps","setState","fetchdata","url","fetch","then","res","json","result","count","totalResults","articles","item","width","src","urlToImage","alt","title","description","Mynewsapp","value","handleChange","bind","event","target","onSubmit","handleSubmit","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be4c52e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\n\r\nclass Navbrand extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render()\r\n  {\r\n    return(\r\n        <a class=\"navbar-brand\" href=\"#\">{this.props.brandname}</a>\r\n    )\r\n  }\r\n}\r\n\r\nclass CollapseButton extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nclass Navlinks extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n  }\r\n\r\n  render(){\r\n      return(\r\n        <ul class=\"navbar-nav\">\r\n          {this.props.links.map(link =>(<li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">{link}</a></li>))}\r\n        </ul>\r\n      )\r\n  }\r\n\r\n\r\n}\r\n\r\nclass Navigationbar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state={\r\n\r\n      links : [\"Home\",\"About\",\"Contact\"],\r\n      brandname : \"Mybrand\"\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n        <nav class=\"navbar navbar-expand-md bg-dark navbar-dark\">\r\n          <Navbrand brandname={this.state.brandname}/>\r\n          <CollapseButton />\r\n          <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n            <Navlinks links={this.state.links}/>\r\n          </div>\r\n        </nav>\r\n\r\n    )\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Navigationbar;\r\n","import React from 'react'\r\n\r\nclass Header extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render(){\r\n    return(\r\n      <div class=\"header container-fluid p-3 my-3 bg-secondary text-white\">\r\n          <h1>{this.props.content}</h1>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nclass Contents extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state={\r\n      country: this.props.country,\r\n      isLoaded : false,\r\n      items :[]\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(prevProps.country !== this.props.country){\r\n      this.setState({country: this.props.country})\r\n      this.fetchdata()\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchdata()\r\n  }\r\n\r\n   fetchdata(){\r\n\r\n     let url = \"https://newsapi.org/v2/top-headlines?country=\"+this.props.country+\"&apiKey=f0597c3b2f81427ca2c47ae854474efb\"\r\n     fetch(url)\r\n       .then(res => res.json())\r\n       .then(\r\n         (result) => {\r\n           this.setState({\r\n             isLoaded: true,\r\n             count: result.totalResults,\r\n             items: result.articles\r\n           })\r\n         },\r\n       )\r\n   }\r\n\r\n   render(){\r\n     return(\r\n       <div class=\"row\">\r\n       {this.state.items.map(item =>(\r\n         <div class=\"col-sm-4\">\r\n           <div class=\"card p-3 my-3\">\r\n              <img class=\"card-img-top\" width=\"match-parent\" src={item.urlToImage} alt=\"image loading failed\"/>\r\n              <div class=\"card-body\">\r\n                <h4 class=\"card-title\">{item.title}</h4>\r\n                <p class=\"card-text\">{item.description}</p>\r\n                <a href={item.url} class=\"btn btn-primary\">Details</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n       ))}\r\n     </div>\r\n     )\r\n   }\r\n\r\n}\r\n\r\n\r\nexport default Contents\r\n","import React from 'react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Navigationbar from './Navigationbar';\r\nimport Header from './Header'\r\nimport Contents from './Contents'\r\n\r\n\r\n\r\nclass Mynewsapp extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {value: 'us'};\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n\r\n      <div class=\"container-fluid\">\r\n        <Navigationbar />\r\n        <div>\r\n        <br />\r\n        <br />\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              change country:\r\n              <select value={this.state.value} onChange={this.handleChange}>\r\n                <option value=\"us\">USA</option>\r\n                <option value=\"in\">India</option>\r\n                <option value=\"ch\">China</option>\r\n                <option value=\"hu\">Hungary</option>\r\n              </select>\r\n            </label>\r\n        </form>\r\n      </div>\r\n        <Header content=\"Latest News\" />\r\n        <Contents country={this.state.value}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Mynewsapp\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Mynewsapp from './Mynewsapp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Mynewsapp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}